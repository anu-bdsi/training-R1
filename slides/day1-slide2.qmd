---
title: Basics of R Programming 
subtitle: BDSI R Training I
format:
  anu-light-revealjs:
    width: 1920
    height: 1080
    auto-stretch: false
    html-math-method: katex
    self-contained: true
    css: assets/custom.css
    footer: anu-bdsi.github.io/training-R1/
author: Emi Tanaka
institute: Biological Data Science Institute
date: 2023/11/02
date-format: "D[nd] MMMM YYYY"
execute: 
  echo: true
---


## Simple algebraic operations

- You can use R like a calculator

```{r}
#| output-location: fragment
3 + 2 * (2 - 6 / 3) 
```

. . . 

- Assignments to object:
  - You can assign values to objects using `<-` or `=`
  - The name of the object can be variable so long as it is _syntactically valid_ (no spaces and most special characters, and the name cannot start with a digit)

```{r}
a <- 3
b = 2
2 * a - b 
```

## Vectors

- We can combine scalars to form vectors using `c()`:

```{r}
a <- c(1, 2, 3)
a / 2
```

. . . 

- This is a vector of length 3 

```{r}
length(a)
```

. . . 

- This vector is stored as a `double` with the class as `numeric`

```{r}
typeof(a)
class(a)
```

## Vectors types

- There are four primary types of atomic vectors: **logical**, **integer**, **double** and **character**.



```{r}
logical_vec <- c(TRUE, FALSE, T, F)
integer_vec <- c(1L, 2L, 3L, 4L)
double_vec <- c(1, 2, 3, 4)
character_vec <- c("A", "B", 'C', 'D')
```
- The integer and double vectors are collectively called **numeric** vectors.

. . . 

- A vector can only consist of the same type.
- If you attempt to combine mismatched types together, it will try to coerce all values to the same type.

```{r}
c(TRUE, 1L)
c("A", 3)
c(TRUE, F, "3", 10, 'X')
```

## Lists 

- Lists allow to combine elements of different types.
```{r}
l <- list(c(1, 2, 3), 
          c(2.5, 3.0),
          c(TRUE, FALSE),
          c("a", "b"))
```

- You can use `str()` to see the internal structure of an object in R.

```{r}
str(l)
```

## Data frames

- `data.frame` is a special type of a _named_ list where each element of the vector is the same length.

```{r}
df <- data.frame(grade = c("A", "B", "C"),
                     n = c(10, 14, 30))

df
```

```{r}
colnames(df)
nrow(df)
ncol(df)
```

## Subsetting vectors [Part 1]{.f3}

- **Positive integers** select elements at the specified positions:

```{r}
#| code-line-numbers: false
x <- c(1.1, 2.2, 3.3, 4.4, 5.5)
x[c(3, 1)]
x[c(2, 2)]
x[c(2.3, 2.8)] # double is silently truncated to integers
```
. . . 

- **Negative integers** exclude elements at the specified positions:

```{r}
#| code-line-numbers: false
#| error: true
x[-c(3, 1)]
x[c(-3, 1)] # you can't mix positive and negative integers
```

## Subsetting vectors [Part 2]{.f3}

- **Logical vectors** select elements where logical value is `TRUE`.

```{r}
x[c(TRUE, FALSE, TRUE, FALSE, TRUE)]
x[x > 3]
```

- If the logical vector used for subsetting a vector is shorter than it then the logical vector is _recycled_ to match the length of the vector.

```{r}
x[c(TRUE, FALSE)] # the same as the first one
```

## Subsetting named vectors 

- **Character vectors** select elements based on the name of the vector (if any):

```{r}
y <- c("a" = 1.1, "b" = 2.2, "c" = 3.3, "d" = 4.4, "e" = 5.5)
y
y[c("c", "a", "a", "f")]
```

## Subsetting lists

::: flex

::: {.w-50}

```{r}
str(l)
```


:::

::: {.w-50 .pl3}

```{r}
#| error: true
l[1]
l[[1]]
l[c(1, 2)]
l[[c(1, 2)]] # what's happened here?!
```

:::

:::




## Subsetting named lists


```{r}
l2 <- list(A = c(1, 2, 3),
           log = c(TRUE, FALSE),
           who = c("Terry", "Jon"))

l2$A
l2[c("A", "log")]
l2[["A"]]
```


## Subsetting data frames

::: flex

::: {.w-20}

```{r}
df
```


:::

::: {.w-80 .pl3}


```{r}
df[1, ]
df[, 1]
df[, 1, drop = FALSE]
df$n
df[["n"]]
```


:::

:::

# Communicating your problem


## 🆘 Asking for help [1]{.circle .monash-bg-red2 .monash-white} [Part 1]{.f4}


* What do you think about the question below?
<center>
<img class="border-box" width = "900px" style="padding:0px" src="images/stackoverflow-1.png">
</center>


## 🆘 Asking for help [1]{.circle .monash-bg-red2 .monash-white} [Part 2]{.f4}


* What do you think now?



::: {.ba .pa3}

I am looking to adjust the size of two separate ggplots within the same R chunk in Rmarkdown. These plots must be different when outputted as a pdf, so defining the dimensions at the beginning of the chunk doesn't work. Does anyone have any ideas? My code is below.
````md
`r ''````{r, fig.height = 3, fig.width = 3}
ggplot(df, aes(weight, height)) +
  geom_point()

ggplot(df, aes(height, volume)) +
  geom_point()
```
````

:::

::: notes

* could not find function "ggplot"
* the package needs to be loaded

:::



## 🆘 Asking for help [1]{.circle .monash-bg-red2 .monash-white} [Part 3]{.f4}


* Is this better?


::: {.ba .pa3}
I am looking to adjust the size of two separate ggplots within the same R chunk in Rmarkdown. These plots must be different when outputted as a pdf, so defining the dimensions at the beginning of the chunk doesn't work. Does anyone have any ideas? My code is below.
````md
`r ''````{r, fig.height = 3, fig.width = 3}
library(ggplot2)
ggplot(df, aes(weight, height)) +
  geom_point()

ggplot(df, aes(height, volume)) +
  geom_point()
```
````

:::

::: notes

* Data `df` is not defined!

:::


## 🆘 Asking for help [1]{.circle .monash-bg-red2 .monash-white} [Part 4]{.f4}


* Okay better now?


::: {.ba .pa3}

I am looking to adjust the size of two separate ggplots within the same R chunk in Rmarkdown. These plots must be different when outputted as a pdf, so defining the dimensions at the beginning of the chunk doesn't work. Does anyone have any ideas? My code is below.
````md
`r ''````{r, fig.height = 3, fig.width = 3}
library(ggplot2)
df <- read.csv("mydata.csv")
ggplot(df, aes(weight, height)) +
  geom_point()

ggplot(df, aes(height, volume)) +
  geom_point()
```
````

:::

::: notes

* Is the data used in this question necessarily for the question?
* Do we even have a copy of `mydata.csv`??

:::




## 🆘 Asking for help [1]{.circle .monash-bg-red2 .monash-white} [Part 5]{.f4}


* Are we done now?

::: {.ba .pa3}

I am looking to adjust the size of two separate ggplots within the same R chunk in Rmarkdown. These plots must be different when outputted as a pdf, so defining the dimensions at the beginning of the chunk doesn't work. Does anyone have any ideas? My code is below.
````md
`r ''````{r, fig.height = 3, fig.width = 3}
library(ggplot2)
ggplot(trees, aes(Girth, Height)) +
  geom_point()

ggplot(trees, aes(Height, Volume)) +
  geom_point()
```
````

:::


::: notes

* Author is using the built-in dataset `trees` here

:::



# ❓ How to ask questions?



## Checklist [(note: not an exhaustive checklist)]{.f3}


<label class="checkbox-container">Is the problem clearly and succinctly described?
<input type="checkbox"><span class="checkmark"></span>
</label>
<label class="checkbox-container">Is the expected solution or behaviour outlined?
<input type="checkbox"><span class="checkmark"></span>
</label>
<label class="checkbox-container">Are you asking the right people at the right place?
<input type="checkbox"><span class="checkmark"></span>
</label>


If the question is **asked in an public forum** or similar:

<label class="checkbox-container">Can people who can answer your question find your question? E.g. does the post have appropriate tags or keywords to reach the right experts?
<input type="checkbox"><span class="checkmark"></span>
</label>
  
  
If the **problem is computer system related**...

<label class="checkbox-container">Can the problem be easily reproduced on other people's system?
<input type="checkbox"><span class="checkmark"></span>
</label>
<label class="checkbox-container">Is the minimum reproducible code or steps supplied?
<input type="checkbox"><span class="checkmark"></span>
</label>

If the **problem is based on data** ...

<label class="checkbox-container">Is the data supplied?
<input type="checkbox"><span class="checkmark"></span>
</label>
<label class="checkbox-container">If the data is big, could you cull your data further to communicate or reproduce the problem?
<input type="checkbox"><span class="checkmark"></span>
</label>




## 🆘 Asking for help [1]{.circle .monash-bg-red2 .monash-white} [Check]{.f4} 
::: flex
::: w-60
<img class="border-box" width = "100%" style="padding:0px" src="images/stackoverflow-1.png">
:::
::: {.w-40 .pl3 .f2}
<label class="checkbox-container">Is the problem clearly and succintly defined?
<input type="checkbox"><span class="checkmark"></span>
</label>
<label class="checkbox-container">Is the expected solution or behaviour outlined?
<input type="checkbox"><span class="checkmark"></span>
</label>
<label class="checkbox-container">Is the problem asked at the right place or person?
<input type="checkbox"><span class="checkmark"></span>
</label>

<label class="checkbox-container">Can people who can answer your question find your question?
<input type="checkbox"><span class="checkmark"></span>
</label>

<label class="checkbox-container">Can the problem be easily reproduced on other people's system?
<input type="checkbox"><span class="checkmark"></span>
</label>
<label class="checkbox-container">Is the minimum reproducible code or steps supplied?
<input type="checkbox"><span class="checkmark"></span>
</label>

<label class="checkbox-container">Is the data supplied?
<input type="checkbox"><span class="checkmark"></span>
</label>
<label class="checkbox-container">If the data is big, could you cull your data further to communicate or reproduce the problem?
<input type="checkbox"><span class="checkmark"></span>
</label>

:::
:::


## 🆘 Asking for help [2]{.circle .monash-bg-red2 .monash-white}

::: flex
::: w-30
* How about the question on the right?
* What makes it *hard* or *easy* for people to answer this question?



:::
::: w-70

<center>
<img class="ba" width = "100%" style="padding:0px" src="images/stackoverflow-2-1.png">
<img class="ba" width = "100%" style="padding:0px" src="images/stackoverflow-2-2.png">

</center>
:::
:::


::: notes

* In this example, the author provides the data but it requires work for others to read this data in.

:::


## Session Information 

You can easily get the session information in R using `sessionInfo()`. <br>[Scroll to see the packages used to make these slides.]{.f4}

::: {.overflow-scroll .h-70}
```{r, include = FALSE}
options(width = 80)
```

```{r}
sessionInfo()
```
:::



## 🎁 Reproducible Example with `reprex` [LIVE DEMO]{.f4}

* Copy your **minimum reproducible example** then run

```{r, eval = FALSE}
reprex::reprex(session_info = TRUE)
```


* Once you run the above command, your clipboard contains the formatted code and output for you to paste into places like [GitHub issues](https://docs.github.com/en/enterprise/2.15/user/articles/creating-an-issue), [Stackoverflow](https://stackoverflow.com/) and forums powered by [Discourse](https://www.discourse.org/), e.g. [RStudio Community](https://community.rstudio.com/).








